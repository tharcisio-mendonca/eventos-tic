name: CI-CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
    CI:
        runs-on: ubuntu-latest
        steps:
            - name: Obtendo o código do projeto
              uses: actions/checkout@v5

            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@v6.0.0 # Ex: v4.1.0 or sha1, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              with:
                args: >
                  -Dsonar.organization=tharcisio-mendonca # For SonarQube Cloud only
                  -Dsonar.projectKey=tharcisio-mendonca
                projectBaseDir: ./src
                
            - name: Setup do Python
              uses: actions/setup-python@v6
              with:
                python-version: '3.13' 

            - name: Instalação das Dependencias 
              working-directory: ./src
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                
            - name: Execução dos testes
              working-directory: ./src
              run: |
                python -m pytest tests/ -v                 

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with: 
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                context: ./src
                file: ./src/Dockerfile
                push: true
                tags: |
                  tharcisiomendonca/web-project:latest
                  tharcisiomendonca/web-project:v${{ github.run_number }}

    CD-Homolog:
        runs-on: ubuntu-latest
        needs: [CI]
        environment: homologacao
        steps:
            - name: Obtendo o código do projeto
              uses: actions/checkout@v5

            - name: Configurar contexto Kubernetes
              uses: azure/k8s-set-context@v4
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBE_CONFIG }}

            - name: Criar namespace de homologação
              run: kubectl create namespace web-homolog --dry-run=client -o yaml | kubectl apply -f -

            - name: Criando secrets em homologação
              run: |
                kubectl create secret generic database-secret \
                  --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
                  --namespace=web-homolog \
                  --dry-run=client -o yaml | kubectl apply -f -

            - name: Deploy no ambiente de homologação
              uses: azure/k8s-deploy@v5
              with:
                namespace: 'web-homolog'
                manifests: |
                  k8s/deployment.yaml

    CD-Prod:
        runs-on: ubuntu-latest
        needs: [CD-Homolog]
        environment: producao
        steps:
            - name: Obtendo o código do projeto
              uses: actions/checkout@v5

            - name: Configurar contexto Kubernetes
              uses: azure/k8s-set-context@v4
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBE_CONFIG }}

            - name: Criar namespace de produção
              run: kubectl create namespace web-prod --dry-run=client -o yaml | kubectl apply -f -

            - name: Criando secrets em Produção
              run: |
                kubectl create secret generic database-secret \
                  --from-literal=DATABASE_URL="${{ secrets.DATABASE_URL }}" \
                  --namespace=web-prod \
                  --dry-run=client -o yaml | kubectl apply -f -

            - name: Deploy no ambiente de produção
              uses: azure/k8s-deploy@v5
              with:
                namespace: 'web-prod'
                manifests: |
                  k8s/deployment.yaml
